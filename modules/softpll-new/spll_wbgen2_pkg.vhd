---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Softcore PLL
---------------------------------------------------------------------------------------
-- File           : spll_wbgen2_pkg.vhd
-- Author         : auto-generated by wbgen2 from wr_softpll.wb
-- Created        : Wed Jan 18 13:13:08 2012
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wr_softpll.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

package SPLL_wbgen2_pkg is
  
  
  -- Input registers (user design -> WB slave)
  
  type t_SPLL_in_registers is record
    spll_csr_n_ref_i                         : std_logic_vector(5 downto 0);
    spll_csr_n_out_i                         : std_logic_vector(2 downto 0);
    spll_occr_out_en_i                       : std_logic_vector(7 downto 0);
    spll_rcer_i                              : std_logic_vector(31 downto 0);
    spll_ocer_i                              : std_logic_vector(7 downto 0);
    spll_per_hpll_error_i                    : std_logic_vector(15 downto 0);
    spll_per_hpll_valid_i                    : std_logic;
    spll_trr_wr_req_i                        : std_logic;
    spll_trr_value_i                         : std_logic_vector(23 downto 0);
    spll_trr_chan_id_i                       : std_logic_vector(6 downto 0);
    spll_trr_disc_i                          : std_logic;
    end record;
  
  constant c_SPLL_in_registers_init_value: t_SPLL_in_registers := (
    spll_csr_n_ref_i => (others => '0'),
    spll_csr_n_out_i => (others => '0'),
    spll_occr_out_en_i => (others => '0'),
    spll_rcer_i => (others => '0'),
    spll_ocer_i => (others => '0'),
    spll_per_hpll_error_i => (others => '0'),
    spll_per_hpll_valid_i => '0',
    spll_trr_wr_req_i => '0',
    spll_trr_value_i => (others => '0'),
    spll_trr_chan_id_i => (others => '0'),
    spll_trr_disc_i => '0'
    );
    
    -- Output registers (WB slave -> user design)
    
    type t_SPLL_out_registers is record
      spll_csr_per_sel_o                       : std_logic_vector(5 downto 0);
      spll_occr_out_lock_o                     : std_logic_vector(7 downto 0);
      spll_rcer_o                              : std_logic_vector(31 downto 0);
      spll_rcer_load_o                         : std_logic;
      spll_ocer_o                              : std_logic_vector(7 downto 0);
      spll_ocer_load_o                         : std_logic;
      spll_dac_hpll_o                          : std_logic_vector(15 downto 0);
      spll_dac_hpll_wr_o                       : std_logic;
      spll_dac_main_value_o                    : std_logic_vector(15 downto 0);
      spll_dac_main_value_wr_o                 : std_logic;
      spll_dac_main_dac_sel_o                  : std_logic_vector(3 downto 0);
      spll_dac_main_dac_sel_wr_o               : std_logic;
      spll_deglitch_thr_o                      : std_logic_vector(15 downto 0);
      spll_trr_wr_full_o                       : std_logic;
      end record;
    
    constant c_SPLL_out_registers_init_value: t_SPLL_out_registers := (
      spll_csr_per_sel_o => (others => '0'),
      spll_occr_out_lock_o => (others => '0'),
      spll_rcer_o => (others => '0'),
      spll_rcer_load_o => '0',
      spll_ocer_o => (others => '0'),
      spll_ocer_load_o => '0',
      spll_dac_hpll_o => (others => '0'),
      spll_dac_hpll_wr_o => '0',
      spll_dac_main_value_o => (others => '0'),
      spll_dac_main_value_wr_o => '0',
      spll_dac_main_dac_sel_o => (others => '0'),
      spll_dac_main_dac_sel_wr_o => '0',
      spll_deglitch_thr_o => (others => '0'),
      spll_trr_wr_full_o => '0'
      );
    function "or" (left, right: t_SPLL_in_registers) return t_SPLL_in_registers;
    function f_x_to_zero (x:std_logic) return std_logic;
end package;

package body SPLL_wbgen2_pkg is
function f_x_to_zero (x:std_logic) return std_logic is
begin
if(x = 'X' or x = 'U') then
return '0';
else
return x;
end if; 
end function;
function "or" (left, right: t_SPLL_in_registers) return t_SPLL_in_registers is
variable tmp: t_SPLL_in_registers;
begin
tmp.spll_csr_n_ref_i := left.spll_csr_n_ref_i or right.spll_csr_n_ref_i;
tmp.spll_csr_n_out_i := left.spll_csr_n_out_i or right.spll_csr_n_out_i;
tmp.spll_occr_out_en_i := left.spll_occr_out_en_i or right.spll_occr_out_en_i;
tmp.spll_rcer_i := left.spll_rcer_i or right.spll_rcer_i;
tmp.spll_ocer_i := left.spll_ocer_i or right.spll_ocer_i;
tmp.spll_per_hpll_error_i := left.spll_per_hpll_error_i or right.spll_per_hpll_error_i;
tmp.spll_per_hpll_valid_i := left.spll_per_hpll_valid_i or right.spll_per_hpll_valid_i;
tmp.spll_trr_wr_req_i := left.spll_trr_wr_req_i or right.spll_trr_wr_req_i;
tmp.spll_trr_value_i := left.spll_trr_value_i or right.spll_trr_value_i;
tmp.spll_trr_chan_id_i := left.spll_trr_chan_id_i or right.spll_trr_chan_id_i;
tmp.spll_trr_disc_i := left.spll_trr_disc_i or right.spll_trr_disc_i;
return tmp;
end function;
end package body;
