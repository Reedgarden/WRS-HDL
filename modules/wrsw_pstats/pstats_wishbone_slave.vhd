---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for WR Switch Per-Port Statistic Counters
---------------------------------------------------------------------------------------
-- File           : pstats_wishbone_slave.vhd
-- Author         : auto-generated by wbgen2 from wrsw_pstats.wb
-- Created        : Thu Feb 14 16:41:42 2013
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wrsw_pstats.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.pstats_wbgen2_pkg.all;


entity pstats_wishbone_slave is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(2 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    regs_i                                   : in     t_pstats_in_registers;
    regs_o                                   : out    t_pstats_out_registers
  );
end pstats_wishbone_slave;

architecture syn of pstats_wishbone_slave is

signal pstats_cr_port_int                       : std_logic_vector(4 downto 0);
signal pstats_cr_addr_int                       : std_logic_vector(4 downto 0);
signal pstats_dbg_clr_dly0                      : std_logic      ;
signal pstats_dbg_clr_int                       : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      regs_o.cr_rd_en_load_o <= '0';
      pstats_cr_port_int <= "00000";
      pstats_cr_addr_int <= "00000";
      pstats_dbg_clr_int <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          regs_o.cr_rd_en_load_o <= '0';
          pstats_dbg_clr_int <= '0';
          ack_in_progress <= '0';
        else
          regs_o.cr_rd_en_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
              regs_o.cr_rd_en_load_o <= '1';
              pstats_cr_port_int <= wrdata_reg(12 downto 8);
              pstats_cr_addr_int <= wrdata_reg(20 downto 16);
            end if;
            rddata_reg(0) <= regs_i.cr_rd_en_i;
            rddata_reg(12 downto 8) <= pstats_cr_port_int;
            rddata_reg(20 downto 16) <= pstats_cr_addr_int;
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(31 downto 0) <= regs_i.cnt_val_i;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(4 downto 0) <= regs_i.irq_r1_port0_i;
            rddata_reg(12 downto 8) <= regs_i.irq_r1_port1_i;
            rddata_reg(20 downto 16) <= regs_i.irq_r1_port2_i;
            rddata_reg(28 downto 24) <= regs_i.irq_r1_port3_i;
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
            end if;
            rddata_reg(4 downto 0) <= regs_i.irq_r2_port4_i;
            rddata_reg(12 downto 8) <= regs_i.irq_r2_port5_i;
            rddata_reg(20 downto 16) <= regs_i.irq_r2_port6_i;
            rddata_reg(28 downto 24) <= regs_i.irq_r2_port7_i;
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
              pstats_dbg_clr_int <= wrdata_reg(31);
            end if;
            rddata_reg(7 downto 0) <= regs_i.dbg_evt_ov_i;
            rddata_reg(15 downto 8) <= regs_i.dbg_cnt_ov_i;
            rddata_reg(31) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Enable transfer of counter content
  regs_o.cr_rd_en_o <= wrdata_reg(0);
-- Port number
  regs_o.cr_port_o <= pstats_cr_port_int;
-- Memory address
  regs_o.cr_addr_o <= pstats_cr_addr_int;
-- 4 counters' values
-- port0 IRQ
-- port1 IRQ
-- port2 IRQ
-- port3 IRQ
-- port4 IRQ
-- port5 IRQ
-- port6 IRQ
-- port7 IRQ
-- Events overflow
-- Counters overflow
-- Clear flags
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pstats_dbg_clr_dly0 <= '0';
      regs_o.dbg_clr_o <= '0';
    elsif rising_edge(clk_sys_i) then
      pstats_dbg_clr_dly0 <= pstats_dbg_clr_int;
      regs_o.dbg_clr_o <= pstats_dbg_clr_int and (not pstats_dbg_clr_dly0);
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
